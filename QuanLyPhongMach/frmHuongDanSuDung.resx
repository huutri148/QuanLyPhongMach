<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>* Hướng dẫn sử dụng :
     - Hệ thống :
            + Đăng nhập : đăng nhập tài khoản người dùng
	+ Đăng xuất : đăng xuất tài khoản người dùng
	+ Đổi mật khẩu : thay đổi mật khẩu người dùng
	+ Thay đổi thông tin các nhân : thay đổi thông tin người dùng
	+ Đóng, đóng tất cả : đóng các form đang hoạt động trên ứng dụng
	+ Thoát : thoát ứng dụng
     - Quản lý nguời dùng:
	+ Quản lý người dùng : thêm xoá sửa người dùng
     - Quản lý bênh nhân:
	+ Bệnh nhân : thêm xoá sửa bệnh nhân
	+ Phiếu khám : thêm loại thuốc, xem hoá đơn và cập nhập thông tin bệnh nhân
     - Tra cứu bệnh nhân : tra cứu bệnh nhân theo tháng
     - Quản lý thuốc :
	+ Thuốc : thêm, xoá, sửa các loại thuốc
     - Thống kê:
	+ Báo cáo sử dụng thuốc: báo cáo số lượng sử dụng và số lượng thuốc đã bán theo từng tháng
	+ Báo cáo doanh thu:  báo cáo số lượng bệnh nhân và doanh thu theo từng tháng
     - Trợ giúp :
	+ Thông tin sản phẩm : thông tin sản phẩm và cấu hình để cài đặt
	+ Hướng dẫn sử dụng : hướng dụng sử dụng sản phẩm

* Thao tác :
     - Hệ thống :
	+ Chọn Đổi mật khẩu để đổi mật khẩu
	+ Chọn Cập nhập thông tin để cập nhập thông tin cho người dùng
	+ Đăng nhập/ Đăng xuất người dùng
     - Thêm người dùng (chỉ dùng cho tài khoản Admin) :  
	+ Chọn Huỷ để làm trắng thông tin
	+ Nhập thông tin người dùng
	+ Chọn Thêm để thêm mới
     - Xoá người dùng :
	+ Chọn người dùng cần xoá (lưu ý không xoá được tài khoản Admin hoặc không xoá được khi số lượng tài khoản nhỏ hơn 3)
	+ Chọn Xoá để xoá người dùng đã chọn
     - Sửa người dùng :
	+ Chọn người dùng cần sửa
	+ Sửa các thông tin cần sửa (lưu ý điền mật khẩu của tài khoản đó)
	+ Chọn Sửa để sửa người dùng đã chọn
     - Thêm xoá sửa bệnh nhân:
	+ Thao tác giống thêm người dùng
	+ Lưu ý : không thêm được bệnh nhân khi số bệnh nhân đạt tối đa trong ngày
     - Phiếu khám bệnh : Trong ô Họ Tên chọn Bệnh nhân để thao tác
	+ Chọn Thêm loại thuốc để thêm số lượng thuốc và cách dùng vào phiếu khám
	+ Chọn Xem hoá đơn để xem thông tin số tiền thanh toán cho Bệnh nhân
	+ Chọn Cập nhập thông tin để lưu thông tin và cập nhập thuốc cho Phiếu khám
     - Thêm, xoá,sửa Thuốc : 
	+ Thao tác giống thêm, xoá, sửa người dùng
     - Báo cáo doanh thu, báo cáo sử dụng thuốc (chỉ dùng cho tài khoản Admin):
	+ Chọn ô loại báo cáo để xem báo cáo</value>
  </data>
</root>